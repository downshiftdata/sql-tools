SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
SET NOCOUNT ON;

DECLARE
    @object_name NVARCHAR(128) = N'{object_name}',
    @schema_name NVARCHAR(128) = N'{schema_name}';

DECLARE
    @full_name NVARCHAR(300),
    @index_id INT,
    @is_constraint BIT,
    @is_primary_key BIT,
    @object_id INT,
    @part_columns NVARCHAR(MAX) = N'',
    @part_constraints NVARCHAR(MAX) = N'',
    @part_comments NVARCHAR(MAX),
    @part_indexes NVARCHAR(MAX) = N'',
    @part_index_columns NVARCHAR(MAX),
    @part_table_with NVARCHAR(MAX) = N'',
    @result NVARCHAR(MAX) = N'';

SELECT @full_name = QUOTENAME(@schema_name) + N'.' + QUOTENAME(@object_name);

SELECT @object_id = OBJECT_ID(@full_name);

IF EXISTS (SELECT 1
        FROM sys.partitions
        WHERE [object_id] = @object_id
            AND [partition_number] > 1)
    THROW 60000, N'Partitioned Tables Not Supported', 0;
IF EXISTS (SELECT 1
        FROM sys.partitions
        WHERE [object_id] = @object_id
            AND [data_compression] > 2)
    THROW 60000, N'Columnstore Not Supported', 0;

SELECT @part_comments = N'/* Auto-Generated by ' + SUSER_SNAME() + N' at ' + CONVERT(NVARCHAR(24), GETUTCDATE(), 121) + N' */'

SELECT @part_columns += N'
        ' + QUOTENAME(c.[name])
            + N' ' + UPPER(t.[name])
            + CASE c.[user_type_id]
                WHEN 106 THEN N'(' + CAST(c.[precision] AS NVARCHAR(20)) + N',' + CAST(c.[scale] AS NVARCHAR(20)) + N')'
                WHEN 108 THEN N'(' + CAST(c.[precision] AS NVARCHAR(20)) + N',' + CAST(c.[scale] AS NVARCHAR(20)) + N')'
                WHEN 165 THEN CASE c.[max_length] WHEN -1 THEN N'(MAX)' ELSE N'(' + CAST(c.[max_length] AS NVARCHAR(20)) + N')' END
                WHEN 167 THEN CASE c.[max_length] WHEN -1 THEN N'(MAX)' ELSE N'(' + CAST(c.[max_length] AS NVARCHAR(20)) + N')' END
                WHEN 173 THEN N'(' + CAST(c.[max_length] AS NVARCHAR(20)) + N')'
                WHEN 175 THEN N'(' + CAST(c.[max_length] AS NVARCHAR(20)) + N')'
                WHEN 231 THEN CASE c.[max_length] WHEN -1 THEN N'(MAX)' ELSE N'(' + CAST(c.[max_length] / 2 AS NVARCHAR(20)) + N')' END
                WHEN 239 THEN N'(' + CAST(c.[max_length] / 2 AS NVARCHAR(20)) + N')'
                ELSE N'' END
            + CASE WHEN c.[is_nullable] = 1 THEN N' NULL' ELSE N' NOT NULL' END
            + CASE WHEN c.[is_identity] = 1 THEN N' IDENTITY(1,1)' ELSE N'' END
            + CASE WHEN dc.[object_id] IS NOT NULL THEN N'
            CONSTRAINT ' + QUOTENAME(dc.[name]) + N' DEFAULT ' + dc.[definition] ELSE N'' END
            + N','
    FROM sys.columns AS c
        INNER JOIN sys.types AS t
            ON c.[object_id] = @object_id
            AND c.[user_type_id] = t.[user_type_id]
        LEFT JOIN sys.default_constraints AS dc
            ON c.[default_object_id] = dc.[object_id]
    ORDER BY c.[column_id];

SELECT @index_id = MIN([index_id])
    FROM sys.indexes AS i
    WHERE i.[object_id] = @object_id;
IF (@index_id = 0)
BEGIN
    SELECT @part_comments += N'
/* WARNING: Heap */';
    SELECT @part_table_with = N'
    ON ' + QUOTENAME(ds.[name]) + N'
    WITH (' + CASE
                WHEN p.[data_compression] = 0 THEN N'DATA_COMPRESSION = NONE'
                WHEN p.[data_compression] = 1 THEN N'DATA_COMPRESSION = ROW'
                WHEN p.[data_compression] = 2 THEN N'DATA_COMPRESSION = PAGE'
                ELSE N'' END + N')'
        FROM sys.indexes AS i
            INNER JOIN sys.data_spaces AS ds
                ON i.[object_id] = @object_id
                AND i.[index_id] = 0
                AND i.[data_space_id] = ds.[data_space_id]
            INNER JOIN sys.partitions AS p
                ON i.[object_id] = p.[object_id]
                AND p.[index_id] = 0
    SELECT @index_id = MIN([index_id])
        FROM sys.indexes AS i
        WHERE i.[object_id] = @object_id
            AND i.[index_id] > 0;
END;
IF (@index_id > 0)
BEGIN
    WHILE (@index_id IS NOT NULL)
    BEGIN
        SELECT @is_constraint = CASE
                WHEN i.[is_primary_key] = 1 THEN 1
                WHEN i.[is_unique_constraint] = 1 THEN 1
                ELSE 0 END
            FROM sys.indexes AS i
            WHERE i.[object_id] = @object_id
                AND i.[index_id] = @index_id;
        SELECT @part_index_columns = N''
        SELECT @part_index_columns += QUOTENAME(c.[name])
                    + CASE WHEN ic.[is_descending_key] = 1 THEN N' DESC' ELSE N'' END
                    + N','
            FROM sys.columns AS c
                INNER JOIN sys.index_columns AS ic
                    ON c.[object_id] = @object_id
                    AND c.[object_id] = ic.[object_id]
                    AND ic.[index_id] = @index_id
                    AND c.[column_id] = ic.[column_id]
                    AND ic.[key_ordinal] > 0
            ORDER BY ic.[key_ordinal];
        SELECT @part_index_columns = LEFT(@part_index_columns, LEN(@part_index_columns) - 1);

        IF EXISTS (SELECT 1
                FROM sys.index_columns AS ic
                WHERE ic.[object_id] = @object_id
                    AND ic.[index_id] = @index_id
                    AND ic.[is_included_column] = 1)
        BEGIN
            SELECT @part_index_columns += N') INCLUDE('
            SELECT @part_index_columns += QUOTENAME(c.[name]) + N','
                FROM sys.columns AS c
                    INNER JOIN sys.index_columns AS ic
                        ON c.[object_id] = @object_id
                        AND c.[object_id] = ic.[object_id]
                        AND ic.[index_id] = @index_id
                        AND c.[column_id] = ic.[column_id]
                        AND ic.[is_included_column] = 1
                ORDER BY ic.[index_column_id];
            SELECT @part_index_columns = LEFT(@part_index_columns, LEN(@part_index_columns) - 1);
        END;

        IF (@is_constraint = 1)
        BEGIN
            SELECT @part_constraints += N'
        CONSTRAINT ' + QUOTENAME(i.[name])
                        + CASE WHEN i.[is_primary_key] = 1 THEN N' PRIMARY KEY' ELSE N' UNIQUE' END
                        + CASE WHEN i.[index_id] = 1 THEN N' CLUSTERED' ELSE N' NONCLUSTERED' END
                        + N' (' + @part_index_columns + N')
            WITH ('
                        + CASE
                            WHEN p.[data_compression] = 0 THEN N'DATA_COMPRESSION = NONE'
                            WHEN p.[data_compression] = 1 THEN N'DATA_COMPRESSION = ROW'
                            WHEN p.[data_compression] = 2 THEN N'DATA_COMPRESSION = PAGE'
                            ELSE N'' END + N')
            ON ' + QUOTENAME(ds.[name]) + N','
                FROM sys.indexes AS i
                    INNER JOIN sys.data_spaces AS ds
                        ON i.[object_id] = @object_id
                        AND i.[index_id] = @index_id
                        AND i.[data_space_id] = ds.[data_space_id]
                    INNER JOIN sys.partitions AS p
                        ON i.[object_id] = p.[object_id]
                        AND i.[index_id] = p.[index_id];
        END;
        ELSE
        BEGIN
            SELECT @part_indexes += N'
IF NOT EXISTS (SELECT 1
        FROM sys.indexes AS i
        WHERE i.[object_id] = OBJECT_ID(N''' + @full_name + N''')
            AND [name] = N''' + i.[name] + N''')
BEGIN
    CREATE'
                        + CASE WHEN i.[is_unique] = 1 THEN N' UNIQUE' ELSE N'' END
                        + CASE WHEN i.[index_id] = 1 THEN N' CLUSTERED' ELSE N' NONCLUSTERED' END
                        + N' INDEX ' + QUOTENAME(i.[name]) + N'
        ON ' + @full_name + N' (' + @part_index_columns + N')
        WITH ('
                        + CASE
                            WHEN p.[data_compression] = 0 THEN N'DATA_COMPRESSION = NONE'
                            WHEN p.[data_compression] = 1 THEN N'DATA_COMPRESSION = ROW'
                            WHEN p.[data_compression] = 2 THEN N'DATA_COMPRESSION = PAGE'
                            ELSE N'' END
                        + N', ONLINE = ON)
        ON ' + QUOTENAME(ds.[name]) + N';
END;
GO'
                FROM sys.indexes AS i
                    INNER JOIN sys.data_spaces AS ds
                        ON i.[object_id] = @object_id
                        AND i.[index_id] = @index_id
                        AND i.[data_space_id] = ds.[data_space_id]
                    INNER JOIN sys.partitions AS p
                        ON i.[object_id] = p.[object_id]
                        AND i.[index_id] = p.[index_id];
        END;

        SELECT @index_id = MIN(i.[index_id])
            FROM sys.indexes AS i
            WHERE i.[object_id] = @object_id
                AND i.[index_id] > @index_id;
    END;
END;

SELECT @result = @part_comments + N'
IF (OBJECT_ID(N''' + @full_name + N''') IS NULL)
BEGIN
    CREATE TABLE ' + @full_name + N' (' + @part_columns + @part_constraints + N')' + @part_table_with + N';
END;
GO' + @part_indexes;

SELECT @result;
